name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.3-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build application
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-restore --verbosity normal
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Install Docker Compose
        run: |
          sudo apt update
          sudo apt install docker-compose -y

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}

     # - name: Copy nginx.conf to VPS
      #  run: scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa MalDealsBackend/nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~
        
      - name: Copy docker-compose.prod.yml to vps_server
        run: sshpass -v -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no MalDealsBackend/docker-compose-prod.yml root@${{ secrets.VPS_IP }}:~

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            export JWT_MAXAGE=${{ secrets.JWT_EXPIRY_MINUTES }}
            export POSTGRES_USER=${{secrets.POSTGRES_USER}}
            export POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}
            export POSTGRES_DB=${{secrets.POSTGRES_DB}}
            docker-compose down
            docker-compose pull
            docker-compose -f MalDealsBackend/docker-compose-prod.yml up -d